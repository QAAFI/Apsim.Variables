import type { NextPage } from "next";
import Head from "next/head";
import React, { useEffect, useRef, useState } from 'react';
import { Badge, BadgeColor } from "../components/atoms";
import { FloatingInput } from "../components/atoms/input";
import { FilterRes, FilterSearch } from "../components/molecules";
import { TagInput } from "../components/molecules/tag-input";
import { ApsimVariable } from "../models";


const filterOptions = [
	{ name: "Variable name", value: "0" },
	{ name: "Tag name", value: "1" },
]
const colorMapper: { [key: string]: BadgeColor } = {
	"0": 'blue',
	"1": 'green',
}


const EditVariables: NextPage = () => {
	const [sorghumVariables, setSorghumVariables] = useState<ApsimVariable[]>([]);
	const [search, setSearch] = useState<FilterRes>({});

	const fileInput = useRef<HTMLInputElement>(null);

	const readFileSuccess = (res) => {
		const data = JSON.parse(res)
		setSorghumVariables(data)
	}

	const handleFileUpload: React.ChangeEventHandler<HTMLInputElement> = (e) => {
		const newFile = e.target?.files?.[0];
		var fileReader = new FileReader();
		fileReader.onload = function (evt) { readFileSuccess(evt.target?.result) };
		fileReader.readAsText(newFile as File);
	}


	const handleFilter = (values: FilterRes) => {
		setSearch(values)
	}

	const searchByVariableName = (searchValue: string, line: ApsimVariable) => {
		return line?.name?.toLowerCase().includes(searchValue.toLowerCase()) ?? false;
	}

	const searchByTagName = (searchValue: string, line: ApsimVariable) => {
		return line?.tags?.map(tag => tag.toLowerCase()).includes(searchValue.toLowerCase()) ?? false;
	}

	const getFilterFuction = (methodIdx: number, search: string, line: ApsimVariable) => {
		switch (methodIdx) {
			case 0:
				return searchByVariableName(search, line);
			case 1:
				return searchByTagName(search, line);
			case 2:
				break;
		}
	}

	const filterMethod = (line: ApsimVariable) => {
		let condition: boolean | undefined = undefined;
		for (var key in search) {
			for (let value of search[key] ?? []) {
				condition = condition || getFilterFuction(+key, value, line);
			}
		}

		return condition
	}

	return (
		<>
			<Head>
				<title>View Apsim classic variables</title>
				<meta name="description" content="Generated by create-t3-app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<div className={`px-20 mx-auto flex flex-col items-center  min-h-screen py-4 ${sorghumVariables.length <= 0 ? 'justify-center' : ""}`}>
				<h1 className="md:text-[2rem] leading-normal font-bold text-gray-700">
					View Apsim Classic Variables
				</h1>
				<input id="import-file" ref={fileInput} type="file" className="hidden" onChange={handleFileUpload} />
				<button type='button'
					onClick={() => fileInput.current?.click()}
					className="ml-5 bg-white py-2 px-3 border border-gray-300 rounded-md shadow-sm text-sm leading-4 font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
					Import JSON
				</button>

				{sorghumVariables.length > 0 && <div className="mt-4 w-full">
					<FilterSearch
						filterPlaceholder={{ name: "Please select" }}
						options={filterOptions}
						onChange={(values) => handleFilter(values)}
						colorMap={colorMapper}
					/>
				</div>}

				< ul className="w-full pt-2 container mx-auto flex flex-col " >
					{sorghumVariables?.map((line, index) => {
						if (filterMethod(line) === false) return;
						return (
							line.name ? (
								<li key={index} className="p-2 relative border flex-row" >
									{line.name &&
										<div className="flex">
											<div className="flex flex-col w-1/4">
												<div className="p-1 font-semibold">{line.name}</div>
												<div className="pl-1 italic text-xs l-4 text-gray-400"> {line.units ? line.units : null}</div>
												<div className="basis-1/4 p-1 text-sm text-gray-600">{line.description ? line.description : null}</div>
											</div>
											<div className="flex flex-col w-3/4">
												<FloatingInput
													lable="Apsim NextGen Reference"
													value={line.nextgen ?? "-"}
													onChange={(value: string) => line.nextgen = value}
													disabled={true}
												/>
												<div className="w-full translate-y-[25%] flex flex-auto gap-1">
													{line?.tags?.map((v, idx) => (
														<div className="pointer-events-auto" key={`tag-${idx}-${v}`}>
															<Badge color='green'>#{v}</Badge>
														</div>
													))}
												</div>
											</div>
										</div>
									}
								</li>
							) : (
								!search && (<li key={index} className="p-2 relative border flex-row" >
									<div className="p-1 italic">{line.source}</div>
								</li>)
							)
						)
					})
					}
				</ul>
			</div>
		</>
	);
};

export default EditVariables;
